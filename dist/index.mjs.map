{"version":3,"file":"index.mjs","sources":["../src/popup.ts","../src/button.ts","../src/index.ts"],"sourcesContent":["\r\nexport interface PopupConfig {\r\n  // RIMOSSO: baseUrl non è più configurabile dall'esterno\r\n  widgetId?: string; \r\n  popupOptions?: {\r\n    width?: number;\r\n    height?: number;\r\n    // Altre opzioni di window.open\r\n  };\r\n  onComplete?: (data: { status: 'success' | 'error'; message?: string }) => void;\r\n  onClose?: () => void; \r\n}\r\n\r\n// --- URL FISSO DELLA TUA APPLICAZIONE POPUP ---\r\n// !!! MODIFICA QUESTO CON L'URL REALE DOVE LA TUA APP SOLIDSTART SARÀ OSPITATA !!!\r\nconst POPUP_APP_BASE_URL = 'http://localhost:3000'; // Esempio: URL di produzione\r\nconst POPUP_APP_PATH = ''; // Il percorso specifico\r\n// ------------------------------------------------\r\n\r\nexport function openTransactionPopup(config: PopupConfig = {}): void {\r\n  // Estrai solo le configurazioni rimaste\r\n  const { \r\n    widgetId, \r\n    popupOptions = {}, \r\n    onComplete, \r\n\r\n  } = config;\r\n\r\n  // 1. Sapere chi utilizza l'SDK (come richiesto)\r\n  const sdkUserOrigin = window.location.origin; \r\n  const sdkUserHref = window.location.href; \r\n  // Puoi usare queste variabili se ti servono, ad esempio per log o altro\r\n  console.log(`Pulsix SDK chiamato da: Origin=${sdkUserOrigin}, Href=${sdkUserHref}`); \r\n\r\n  // 2. Usare l'URL fisso definito sopra\r\n  let popupUrl = `${POPUP_APP_BASE_URL}${POPUP_APP_PATH}`;\r\n  if (widgetId) {\r\n    const separator = popupUrl.includes('?') ? '&' : '?';\r\n    popupUrl += `${separator}widgetId=${encodeURIComponent(widgetId)}`;\r\n  }\r\n\r\n  // 3. Imposta l'origine permessa per i messaggi in base all'URL fisso\r\n  const allowedOrigin = new URL(POPUP_APP_BASE_URL).origin; \r\n\r\n  // Imposta dimensioni desiderate (dal tuo codice precedente)\r\n  const desiredWidth = 500;  \r\n  const desiredHeight = 700; \r\n\r\n  const defaultOptions = {\r\n    width: desiredWidth,\r\n    height: desiredHeight,\r\n    left: window.screenX + (window.outerWidth - desiredWidth) / 2, \r\n    top: window.screenY + (window.outerHeight - desiredHeight) / 2, \r\n    scrollbars: 'yes',\r\n  };\r\n  const finalOptions = { ...defaultOptions, ...popupOptions };\r\n  const windowFeatures = Object.entries(finalOptions)\r\n  .map(([key, value]) => `${key}=${value}`) \r\n  .join(',');\r\n  console.log('Window Features String:', windowFeatures);\r\n\r\n  // Apri la popup con l'URL fisso\r\n  const popup = window.open(popupUrl, 'SolidStart_TransactionPopup', windowFeatures);\r\n\r\n  // Gestione popup bloccata \r\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\r\n    alert('Popup bloccata! Abilita le popup per questo sito per continuare.');\r\n    return;\r\n  }\r\n\r\n  // Listener per messaggi dalla popup \r\n  let messageListener: ((event: MessageEvent) => void) | null = null;\r\n  if (onComplete && typeof onComplete === 'function') {\r\n    messageListener = (event: MessageEvent) => {\r\n      // Usa allowedOrigin derivato dall'URL fisso della popup\r\n      if (event.origin !== allowedOrigin) { \r\n        console.warn('Ignored message from unexpected origin:', event.origin, 'Expected:', allowedOrigin);\r\n        return;\r\n      }\r\n      if (event.source !== popup) { /* ... */ return; }\r\n      if (event.data && event.data.type === 'transactionComplete') {\r\n        onComplete(event.data); \r\n        if (messageListener) { window.removeEventListener('message', messageListener); }\r\n      }\r\n    };\r\n    window.addEventListener('message', messageListener, false);\r\n  }\r\n\r\n\r\n}","// PulsixSdk/src/button.ts\r\n\r\nimport { openTransactionPopup, PopupConfig } from './popup'; // Assumendo che openTransactionPopup e PopupConfig siano in src/popup.ts\r\n\r\n// Definiamo la classe per il nostro custom element <pulsix-button>\r\nclass Button extends HTMLElement {\r\n\r\n  private _buttonElement: HTMLButtonElement | null = null;\r\n  private _popupConfig: PopupConfig = {}; // Memorizza la configurazione\r\n\r\n  constructor() {\r\n    super(); // Chiama sempre il costruttore della classe base (HTMLElement)\r\n    console.log('[Pulsix WC] Constructor: START'); // Log 1\r\n\r\n    try {\r\n      this.attachShadow({ mode: 'open' });\r\n      console.log('[Pulsix WC] Constructor: Shadow attached', this.shadowRoot); // Log 2\r\n    } catch (e) {\r\n      console.error('[Pulsix WC] Constructor: ERROR attaching shadow!', e); // Log Errore 1\r\n      return; // Interrompi se non possiamo creare lo shadow DOM\r\n    }\r\n\r\n    console.log('[Pulsix WC] Constructor: Calling render...'); // Log 3\r\n    try {\r\n      this.render();\r\n      console.log('[Pulsix WC] Constructor: render() finished.'); // Log 6 (dopo render)\r\n    } catch (e) {\r\n       console.error('[Pulsix WC] Constructor: ERROR calling render!', e); // Log Errore 3\r\n    }\r\n    console.log('[Pulsix WC] Constructor: END'); // Log 7\r\n  }\r\n\r\n  // --- Gestione Attributi Osservati ---\r\n  static get observedAttributes() {\r\n    return ['button-text', 'widget-id', 'popup-config-json'];\r\n  }\r\n\r\n  attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {\r\n    console.log(`[Pulsix WC] attributeChangedCallback: ${name} changed from ${oldValue} to ${newValue}`);\r\n    // ... (logica esistente per aggiornare _buttonElement.textContent e _popupConfig) ...\r\n    if (name === 'button-text' && this._buttonElement && newValue !== null) {\r\n      this._buttonElement.textContent = newValue;\r\n    }\r\n    if (name === 'popup-config-json' && newValue !== null) {\r\n       try {\r\n         const configUpdate = JSON.parse(newValue);\r\n         this._popupConfig = { ...this._popupConfig, ...configUpdate };\r\n         console.log('[Pulsix WC] attributeChangedCallback: Popup config updated from attribute:', this._popupConfig);\r\n       } catch (e) {\r\n         console.error(\"[Pulsix WC] attributeChangedCallback: Error parsing popup-config-json attribute:\", e);\r\n       }\r\n    }\r\n     if (name === 'widget-id' && newValue !== null) {\r\n       this._popupConfig = { ...this._popupConfig, widgetId: newValue };\r\n     }\r\n  }\r\n\r\n  // --- Proprietà JavaScript ---\r\n  set popupConfig(config: PopupConfig) {\r\n      this._popupConfig = config;\r\n      console.log('[Pulsix WC] Property Setter: popupConfig set via JS:', this._popupConfig);\r\n  }\r\n\r\n  get popupConfig(): PopupConfig {\r\n      return this._popupConfig;\r\n  }\r\n\r\n\r\n  // --- Metodi del Ciclo di Vita ---\r\n  connectedCallback() {\r\n    console.log('[Pulsix WC] connectedCallback: CALLED', 'Button Element:', this._buttonElement);\r\n    // È buona norma aggiungere l'event listener qui\r\n    if (this._buttonElement) {\r\n        this._buttonElement.addEventListener('click', this.handleClick);\r\n        console.log('[Pulsix WC] connectedCallback: Click listener ADDED.');\r\n    } else {\r\n        console.warn('[Pulsix WC] connectedCallback: _buttonElement NOT found when adding listener!');\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    console.log('[Pulsix WC] disconnectedCallback: CALLED');\r\n    // Rimuovi l'event listener per pulizia\r\n    if (this._buttonElement) {\r\n      this._buttonElement.removeEventListener('click', this.handleClick);\r\n      console.log('[Pulsix WC] disconnectedCallback: Click listener REMOVED.');\r\n    }\r\n  }\r\n\r\n  // --- Logica Interna ---\r\n  private handleClick = () => {\r\n    console.log('[Pulsix WC] handleClick: Clicked! Opening popup with config:', this._popupConfig);\r\n    openTransactionPopup(this._popupConfig);\r\n  }\r\n\r\n  private render() {\r\n    console.log('[Pulsix WC] render: START'); // Log 4\r\n\r\n    // Controlla *l'esistenza* dello shadowRoot\r\n    if (this.shadowRoot) {\r\n       console.log('[Pulsix WC] render: Shadow root exists. Clearing...'); // Log 5a\r\n       this.shadowRoot.innerHTML = ''; // Svuota\r\n\r\n       try {\r\n          // Definisci lo stile (aggiunto bordo rosso per debug visivo)\r\n          const style = document.createElement('style');\r\n          style.textContent = `\r\n            :host {\r\n              display: inline-block !important; /* Stili per l'elemento <pulsix-button> stesso */\r\n              border: 2px dashed red; /* Per vedere se l'host occupa spazio */\r\n              padding: 1px; /* Minimo padding per visibilità bordo */\r\n            }\r\n            button {\r\n              /* Stili base per il bottone interno */\r\n              padding: 10px 20px;\r\n              font-size: 1rem;\r\n              width: 100px;\r\n              cursor: pointer;\r\n              border: 1px solid #ccc;\r\n              border-radius: 4px;\r\n              background-color: #f0f0f0;\r\n              display: inline-block; /* Assicurati che il bottone sia visibile */\r\n              visibility: visible; /* Assicurati che sia visibile */\r\n            }\r\n            button:hover {\r\n              background-color: #e0e0e0;\r\n            }\r\n          `;\r\n          this.shadowRoot.appendChild(style);\r\n          console.log('[Pulsix WC] render: Style appended.'); // Log 5b\r\n\r\n          // Crea il bottone interno\r\n          this._buttonElement = document.createElement('button');\r\n          this._buttonElement.textContent = this.getAttribute('button-text') || 'Apri Pulsix (Default)'; // Testo default aggiornato\r\n          this.shadowRoot.appendChild(this._buttonElement);\r\n          console.log('[Pulsix WC] render: Button element appended.', this._buttonElement); // Log 5c\r\n\r\n       } catch (e) {\r\n         console.error('[Pulsix WC] render: ERROR creating/appending style or button!', e); // Log Errore 2\r\n       }\r\n\r\n    } else {\r\n       console.error('[Pulsix WC] render: ERROR - this.shadowRoot is NULL or not accessible!'); // Log Errore 4\r\n    }\r\n     console.log('[Pulsix WC] render: END'); // Log 5d (dovrebbe apparire se non ci sono errori sopra)\r\n  }\r\n}\r\n\r\n// Esportiamo la classe\r\nexport default Button;","// src/index.ts\r\n// src/index.ts\r\n\r\n// -------------------------------------------------------------------------\r\n// PASSO 1: Esporta la logica principale e i tipi necessari\r\n// È buona norma spostare la definizione di PopupConfig e openTransactionPopup \r\n// in un file separato, ad esempio \"src/popup.ts\", e poi importarli qui.\r\n// Assumiamo che tu l'abbia fatto:\r\n\r\nimport { openTransactionPopup } from './popup'; // Importa da dove hai messo la funzione\r\nexport { openTransactionPopup };               // Riesporta per l'utente\r\n\r\n// Esporta anche il tipo PopupConfig perché serve al Web Component e all'utente\r\nexport type { PopupConfig } from './popup';    // Esporta da dove hai messo l'interfaccia\r\n// -------------------------------------------------------------------------\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n// PASSO 2: Importa la classe del tuo Web Component\r\nimport button from './button';\r\n// -------------------------------------------------------------------------\r\n///\r\n////ds\r\n// -------------------------------------------------------------------------\r\n// PASSO 3: Registra il Custom Element nel browser\r\n// Questo rende il tag <pulsix-button> utilizzabile nell'HTML\r\n\r\n// Facciamo dei controlli per sicurezza:\r\n// - typeof window !== 'undefined': Assicura che siamo in un ambiente browser\r\n// - window.customElements: Verifica che il browser supporti i Custom Elements\r\n// - !window.customElements.get('pulsix-button'): Evita errori se l'elemento è già stato registrato \r\n//   (utile se il tuo script viene caricato più volte o con Hot Module Replacement)\r\nif (typeof window !== 'undefined' && window.customElements && !window.customElements.get('pulsix-button')) {\r\n  \r\n  // Definisce il tag 'pulsix-button' e lo associa alla classe PulsixButton\r\n  window.customElements.define('pulsix-button', button);\r\n  \r\n  console.log('Custom element <pulsix-button> registrato.'); \r\n}\r\n// -------------------------------------------------------------------------\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n// PASSO 4: (Opzionale) Esporta la classe del Web Component\r\n// Potrebbe essere utile se qualcuno volesse estenderla o registrarla manualmente\r\nexport { button };\r\n// -------------------------------------------------------------------------\r\n\r\n\r\n// NOTA IMPORTANTE: \r\n// Il codice che definisce effettivamente openTransactionPopup \r\n// (con le costanti POPUP_APP_BASE_URL, POPUP_APP_PATH, il calcolo di allowedOrigin, \r\n// window.open, i listener, ecc.) e l'interfaccia PopupConfig dovrebbe ora\r\n// trovarsi nel file \"src/popup.ts\" (o un altro nome che scegli) e essere importato qui.\r\n// Questo rende src/index.ts più pulito e dedicato solo a definire l'interfaccia pubblica del tuo SDK."],"names":["POPUP_APP_BASE_URL","POPUP_APP_PATH","openTransactionPopup","config","widgetId","popupOptions","onComplete","sdkUserOrigin","sdkUserHref","popupUrl","separator","allowedOrigin","desiredWidth","desiredHeight","finalOptions","windowFeatures","key","value","popup","messageListener","event","Button","e","name","oldValue","newValue","configUpdate","style","button"],"mappings":"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"}